// Generated by gencpp from file hector_uav_msgs/FinishTime.msg
// DO NOT EDIT!


#ifndef HECTOR_UAV_MSGS_MESSAGE_FINISHTIME_H
#define HECTOR_UAV_MSGS_MESSAGE_FINISHTIME_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hector_uav_msgs
{
template <class ContainerAllocator>
struct FinishTime_
{
  typedef FinishTime_<ContainerAllocator> Type;

  FinishTime_()
    : task_id(0)
    , actual_finish_time(0.0)  {
    }
  FinishTime_(const ContainerAllocator& _alloc)
    : task_id(0)
    , actual_finish_time(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _task_id_type;
  _task_id_type task_id;

   typedef float _actual_finish_time_type;
  _actual_finish_time_type actual_finish_time;





  typedef boost::shared_ptr< ::hector_uav_msgs::FinishTime_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hector_uav_msgs::FinishTime_<ContainerAllocator> const> ConstPtr;

}; // struct FinishTime_

typedef ::hector_uav_msgs::FinishTime_<std::allocator<void> > FinishTime;

typedef boost::shared_ptr< ::hector_uav_msgs::FinishTime > FinishTimePtr;
typedef boost::shared_ptr< ::hector_uav_msgs::FinishTime const> FinishTimeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hector_uav_msgs::FinishTime_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hector_uav_msgs::FinishTime_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hector_uav_msgs::FinishTime_<ContainerAllocator1> & lhs, const ::hector_uav_msgs::FinishTime_<ContainerAllocator2> & rhs)
{
  return lhs.task_id == rhs.task_id &&
    lhs.actual_finish_time == rhs.actual_finish_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hector_uav_msgs::FinishTime_<ContainerAllocator1> & lhs, const ::hector_uav_msgs::FinishTime_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hector_uav_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hector_uav_msgs::FinishTime_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hector_uav_msgs::FinishTime_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hector_uav_msgs::FinishTime_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hector_uav_msgs::FinishTime_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_uav_msgs::FinishTime_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hector_uav_msgs::FinishTime_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hector_uav_msgs::FinishTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0a2b7ffc95095888c49a445900a66d0b";
  }

  static const char* value(const ::hector_uav_msgs::FinishTime_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0a2b7ffc95095888ULL;
  static const uint64_t static_value2 = 0xc49a445900a66d0bULL;
};

template<class ContainerAllocator>
struct DataType< ::hector_uav_msgs::FinishTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hector_uav_msgs/FinishTime";
  }

  static const char* value(const ::hector_uav_msgs::FinishTime_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hector_uav_msgs::FinishTime_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 task_id\n"
"float32 actual_finish_time\n"
;
  }

  static const char* value(const ::hector_uav_msgs::FinishTime_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hector_uav_msgs::FinishTime_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.task_id);
      stream.next(m.actual_finish_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FinishTime_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hector_uav_msgs::FinishTime_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hector_uav_msgs::FinishTime_<ContainerAllocator>& v)
  {
    s << indent << "task_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.task_id);
    s << indent << "actual_finish_time: ";
    Printer<float>::stream(s, indent + "  ", v.actual_finish_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HECTOR_UAV_MSGS_MESSAGE_FINISHTIME_H
