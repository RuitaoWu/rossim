# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from hector_uav_msgs/Task.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Task(genpy.Message):
  _md5sum = "805c38fcecb9bf4e6d60cd1d797806d4"
  _type = "hector_uav_msgs/Task"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int16 task_idx
int32 size
int16 processor_id
int16[] dependency
float32 st
float32 et
float32 delta
float32 ci"""
  __slots__ = ['task_idx','size','processor_id','dependency','st','et','delta','ci']
  _slot_types = ['int16','int32','int16','int16[]','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       task_idx,size,processor_id,dependency,st,et,delta,ci

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Task, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.task_idx is None:
        self.task_idx = 0
      if self.size is None:
        self.size = 0
      if self.processor_id is None:
        self.processor_id = 0
      if self.dependency is None:
        self.dependency = []
      if self.st is None:
        self.st = 0.
      if self.et is None:
        self.et = 0.
      if self.delta is None:
        self.delta = 0.
      if self.ci is None:
        self.ci = 0.
    else:
      self.task_idx = 0
      self.size = 0
      self.processor_id = 0
      self.dependency = []
      self.st = 0.
      self.et = 0.
      self.delta = 0.
      self.ci = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_hih().pack(_x.task_idx, _x.size, _x.processor_id))
      length = len(self.dependency)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(struct.Struct(pattern).pack(*self.dependency))
      _x = self
      buff.write(_get_struct_4f().pack(_x.st, _x.et, _x.delta, _x.ci))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.task_idx, _x.size, _x.processor_id,) = _get_struct_hih().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dependency = s.unpack(str[start:end])
      _x = self
      start = end
      end += 16
      (_x.st, _x.et, _x.delta, _x.ci,) = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_hih().pack(_x.task_idx, _x.size, _x.processor_id))
      length = len(self.dependency)
      buff.write(_struct_I.pack(length))
      pattern = '<%sh'%length
      buff.write(self.dependency.tostring())
      _x = self
      buff.write(_get_struct_4f().pack(_x.st, _x.et, _x.delta, _x.ci))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.task_idx, _x.size, _x.processor_id,) = _get_struct_hih().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sh'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.dependency = numpy.frombuffer(str[start:end], dtype=numpy.int16, count=length)
      _x = self
      start = end
      end += 16
      (_x.st, _x.et, _x.delta, _x.ci,) = _get_struct_4f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_hih = None
def _get_struct_hih():
    global _struct_hih
    if _struct_hih is None:
        _struct_hih = struct.Struct("<hih")
    return _struct_hih
